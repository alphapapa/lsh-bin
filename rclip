#!/bin/bash

# Setup
RCLIP_CMD=$0
RSH_CMD="ssh lsh.io bash --login rclip"
FEEDBACK_CMD="true"

[[ -e `which notify-send` ]] && [[ -n $DISPLAY ]] && FEEDBACK_CMD="notify-send"

CLIP_BASE="$HOME/rclip"

# parse args
while [[ -n $1 ]]; do
    ARG=$1
    shift
    case $ARG in
        '-c') 
            CLIP_NAME=$1
            CLIP_BASE+="."
            shift
        ;;
        *) 
            OP=$ARG
            break
        ;;
    esac
done

CLIP_FILE="${CLIP_BASE}${CLIP_NAME}.clip"
LOG_FILE="${CLIP_BASE}${CLIP_NAME}.log"

# hackily handle selection choice for copy/paste
case $1 in
    primary|secondary|clipboard)
        SELECTION=$1
        shift
    ;;
    *) SELECTION="clipboard" ;;
esac

# actually do anything
case $OP in
    copy) 
        (xclip -o -selection $SELECTION | $RCLIP_CMD put $@ &&\
        $FEEDBACK_CMD "rclip: uploaded $SELECTION") ||\
        $FEEDBACK_CMD "rclip: failed to upload"
    ;;
    paste)
        ($RCLIP_CMD get $@ | xclip -i -selection $SELECTION &&\
        $FEEDBACK_CMD "rclip: downloaded clip to $SELECTION") ||\
        $FEEDBACK_CMD "rclip: failed to download."
    ;;
    put) $RSH_CMD local_put $@;;
    get) $RSH_CMD local_get $@;;
    loop) $RSH_CMD local_loop $@;; 
    tail) $RSH_CMD local_tail $@;;
    io)
        $RCLIP_CMD tail $@ &
        while read MSG; do
            echo "$MSG" | $RCLIP_CMD put $@
        done
        kill %1
    ;;
    local_put)
	DATE=`logdate`
	[[ $1 != '-a' ]] && echo -e "\n======[$DATE | $@]=====" >> $LOG_FILE

        tee -a $LOG_FILE > $CLIP_FILE
    ;;    
    local_get)  cat $CLIP_FILE;;
    local_tail) tail -f -n +0 $LOG_FILE;;
esac

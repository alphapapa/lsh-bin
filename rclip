#!/bin/bash

# Setup
LOCAL_CMD=$0
REMOTE_CMD="ssh lsh.io bash --login rclip"
REMOTE_CMD_FOR_TAIL="ssh -t -t lsh.io bash --login rclip"
CMD_ARGS=""
FEEDBACK_CMD="true"

[[ -e `which notify-send` ]] && [[ -n $DISPLAY ]] && FEEDBACK_CMD="notify-send -a rclip"

CLIP_BASE="$HOME/rclip"

# parse args
while [[ -n $1 ]]; do
    ARG=$1
    shift
    case $ARG in
        '-c') 
            CLIP_NAME=$1
            CLIP_BASE+="."
            CMD_ARGS+=" -c $CLIP_NAME"
            shift
        ;;
        *) 
            OP=$ARG
            break
        ;;
    esac
done

CLIP_FILE="${CLIP_BASE}${CLIP_NAME}.clip"
LOG_FILE="${CLIP_BASE}${CLIP_NAME}.log"

# hackily handle selection choice for copy/paste
case $1 in
    primary|secondary|clipboard)
        SELECTION=$1
        shift
    ;;
    *) SELECTION="clipboard" ;;
esac

LOCAL_CMD+=$CMD_ARGS
REMOTE_CMD+=$CMD_ARGS
REMOTE_CMD_FOR_TAIL+=$CMD_ARGS

# actually do anything
case $OP in
    copy) 
        $FEEDBACK_CMD "starting upload of $SELECTION"
        (xclip -o -selection $SELECTION | $LOCAL_CMD put $@ &&\
        $FEEDBACK_CMD "uploaded $SELECTION") ||\
        $FEEDBACK_CMD "failed to upload"
    ;;
    paste)
        $FEEDBACK_CMD "starting download of $SELECTION"
        ($LOCAL_CMD get $@ | xclip -i -selection $SELECTION &&\
        $FEEDBACK_CMD "downloaded clip to $SELECTION") ||\
        $FEEDBACK_CMD "failed to download."
    ;;
    put) $REMOTE_CMD local_put $@;;
    get) $REMOTE_CMD local_get $@;;
    note) echo -e "$@" | $LOCAL_CMD put -a;;
    tail) $REMOTE_CMD_FOR_TAIL local_tail $@;;
    io)
        $LOCAL_CMD tail $@ &
        while read MSG; do
            echo "$MSG" | $LOCAL_CMD put $@
        done
        kill %1
    ;;
    local_put)
	DATE=`logdate`
        ID=`date '+%s.%N'`
        EVENT='clip'

        #TODO: non-brittle arg handling
        if [[ $1 == '-e' ]]; then
            EVENT=$2
            shift 2
        fi

        MUNGE='s/^\(.*\)$/data: \1/'
	if [[ $1 == '-a' ]]; then
            tee -a $CLIP_FILE | sed "$MUNGE" >> $LOG_FILE
        else
            printf "\nevent: %s\nid: %s\ntime: %s\nmeta: %s\n" "$EVENT" "$ID" "$DATE" "$*" >> $LOG_FILE
            tee $CLIP_FILE | sed "$MUNGE" >> $LOG_FILE
            printf "\n\n" >> $LOG_FILE
        fi
    ;;    
    local_get) cat $CLIP_FILE;;
    local_tail)
        if [[ $1 == '-raw' ]]; then
            RAW=$1
            shift
        fi

        AFTER=
        #TODO: non-brittle arg handling
        if [[ $1 == '-after' ]]; then
            shift
            AFTER="-after $1"
            shift
        fi

        tail $@ $LOG_FILE | decode-es $AFTER $LOCAL_CMD handle_packet $RAW $@
    ;;
    handle_packet)
        if [[ $1 == '-raw' ]]; then
            cat
            printf "\n"
        else
            printf "`tput -T xterm smso`    %s | %s | id=%s   `tput -T xterm rmso`\n%s\n\n" "$TIME" "$META" "$ID" "$DATA"
        fi
    ;;
    *) echo "Unrecognized subcommand $OP"; exit 1
esac

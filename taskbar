#!/bin/sh
xsk Super_L Super_R && noTimeout="-t 0"

pidof -x -o $$ taskbar && exit

windowState() {
    local win=$(xdotool getactivewindow)
    local state="$(xprop -id $win)"

    printf '['

    (printf "$state" | grep -qi 'floating[^=]*= 1') && printf 'F '
    (printf "$state" | grep -qi maximized) && printf '+ '
    (printf "$state" | grep -qi sticky) && printf 'S '
    
    printf '%s] %s' "$(($(xdotool get_desktop_for_window "$win")+1))" "$(xdotool getwindowname "$win")"
}

windowList() {
    xdotool search --onlyvisible --desktop $(xdotool get_desktop) . getwindowname %@ | sed 's/</≺/g'
}

powerState() {
    local sep=''
    cd /sys/class/power_supply
    ls | while read supply; do
        printf "$sep"
        case "$(< "$supply/type")" in
            Mains)
                if test "$(< "$supply/online")" = "1"; then
                    printf "${supply}: online"
                else
                    printf "${supply}: unplugged"
                fi
                ;;
            Battery)
                if test "$(< "$supply/present")" = "1"; then
                    printf '%s: %s%% (%sW %s)' \
                        "$supply" \
                        "$(< "$supply/capacity")" \
                        "$(awk '{print $1*10^-6}' "$supply/power_now")" \
                        "$(< "$supply/status")"
                fi
                ;;
            *)
                printf 'Unknown: %s' "$supply"
                ;;
        esac
        sep=' / '
    done
    printf '\n'
}

soundState() {
    amixer get Master | tail -1 | sed 's/^[^:]\+:/Master/'
}

playerState() {
     xdotool search YouTube getwindowname | sed 's/- YouTube - Chromium//'
}

cpuCount="$(cat /proc/cpuinfo | grep -c processor)"
cpuState() {
    out="$(top -b -n 2 -d 0.05 -w 80)"
    printf '%s' "$out" | grep Tasks | tail -1
    printf '%s' "$out" | grep Mem | tail -1
    printf '%s' "$out" | grep '%Cpu' | tail -$cpuCount
}

netState() {
    ip a show up | grep inet | scut 2-3 | tail -n +3 | tr '\n' ' ' | fold -s -w 80
    echo
}

formatSection() {
    section="$(sed -e "1 s/^/$1 /" -e '1! s/^/   /')"
    test -n "$section" && printf "%s\n\n" "$section"
}

while true; do
    feedback -r 1337 $noTimeout "$(windowState)" "$(
        echo
        date +'%a %Y/%m/%d %H:%M.%S (epoch+%s)' | formatSection '⏰'
        windowList | formatSection '🖥️'
        powerState | formatSection '🔌'
        netState | formatSection '📡'
        playerState | formatSection '🎵'
        soundState | formatSection '🔊'
        if test -z "$skipped"; then
            printf 'Waiting for top...\n\n\n\n\n%79s' '.'
        else
            cpuState
        fi | formatSection '📊'
    )"
    sleep 0.2
    skipped=1
done &
loopId=$!

#TODO: move into a 'wait for super up' script
if test -n "$noTimeout"; then
    xsk | while read k; do
        case "$k" in
           Super_*\ 0)
               kill $loopId;
               feedback -x 1337;
               exit
            ;;
           *) echo "$k"
        esac
    done
fi
